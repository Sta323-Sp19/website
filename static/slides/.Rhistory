facet_grid(year~continent) +
labs(x = 'GDP per capita', y = 'life expectancy')
gapminder %>%
filter(year > 1985) %>%
ggplot(aes(gdpPercap, lifeExp, size = pop, color = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_color_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_grid(year~continent) +
labs(x = 'GDP per capita', y = 'life expectancy')
gapminder %>%
ggplot(aes(gdpPercap, lifeExp, size = pop, color = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_color_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~year) +
labs(x = 'GDP per capita', y = 'life expectancy')
library(gganimate)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
options(
htmltools.dir.version = FALSE, # for blogdown
width = 110,
tibble.width = 110
)
knitr::opts_chunk$set(
fig.align = "center",
out.width = "100%",
fig.height = 4,
dpi = 144
)
library(dplyr)
library(ggplot2)
library(patchwork)
library(gganimate)
set.seed(100)
diamonds = dplyr::sample_n(diamonds, 5000)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_states(year, transition_length = 1, state_length = 1) +
ease_aes('linear')
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(title = 'Year: {year}', x = 'GDP per capita', y = 'life expectancy') +
transition_states(year, transition_length = 1, state_length = 1) +
ease_aes('linear')
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(title = 'Year: {frame_state}', x = 'GDP per capita', y = 'life expectancy') +
transition_states(year, transition_length = 1, state_length = 1) +
ease_aes('linear')
?transition_states
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(title = 'Year: {closest_state}', x = 'GDP per capita', y = 'life expectancy') +
transition_states(year, transition_length = 1, state_length = 1) +
ease_aes('linear')
?ease_aes
display_ease('linear')
tweener::display_ease('linear')
tweenr::display_ease('linear')
tweenr::display_ease('elastic')
tweenr::display_ease('elastic-in')
tweenr::display_ease('elastic-in-out')
tweenr::display_ease('elastic-out')
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(title = 'Year: {closest_state}', x = 'GDP per capita', y = 'life expectancy') +
transition_states(year, transition_length = 1, state_length = 1) +
ease_aes('elastic-out')
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(title = 'Year: {closest_state}', x = 'GDP per capita', y = 'life expectancy') +
transition_states(year, transition_length = 3, state_length = 1) +
ease_aes('elastic-out')
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(title = 'Year: {closest_state}', x = 'GDP per capita', y = 'life expectancy') +
transition_states(year, transition_length = 3, state_length = 1) +
ease_aes('bounce')
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(title = 'Year: {closest_state}', x = 'GDP per capita', y = 'life expectancy') +
transition_states(year, transition_length = 3, state_length = 1) +
ease_aes('bounce-in-out')
?shadow_wake
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(title = 'Year: {closest_state}', x = 'GDP per capita', y = 'life expectancy') +
transition_states(year, transition_length = 1, state_length = 2) +
shadow_wake(wake_length=0.1, wrap=FALSE)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(title = 'Year: {closest_state}', x = 'GDP per capita', y = 'life expectancy') +
transition_states(year, transition_length = 1, state_length = 2) +
shadow_trail(wrap=FALSE)
?shadow_trail
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(title = 'Year: {closest_state}', x = 'GDP per capita', y = 'life expectancy') +
transition_states(year, transition_length = 1, state_length = 2) +
shadow_trail(distance = 1, alpha=0.1, size=0.2)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(title = 'Year: {closest_state}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear') +
shadow_trail(distance = 1, alpha=0.1, size=0.2)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear') +
shadow_trail(distance = 1, alpha=0.1, size=0.2)
ggplot(datasauRus::datasaurus_dozen, aes(x=x, y=y))+
geom_point()+
theme_minimal() +
transition_states(dataset, 3, 1) +
ease_aes('cubic-in-out')
install.packages("datasauRus")
ggplot(datasauRus::datasaurus_dozen, aes(x=x, y=y))+
geom_point()+
theme_minimal() +
transition_states(dataset, 3, 1) +
ease_aes('cubic-in-out')
ggplot2::theme_set(ggplot2::theme_bw())
ggplot(datasauRus::datasaurus_dozen, aes(x=x, y=y))+
geom_point()+
transition_states(dataset, 3, 1) +
ease_aes('cubic-in-out')
airq <- airquality
airq$Month <- format(ISOdate(2004,1:12,1),"%B")[airq$Month]
ggplot(airq, aes(Day, Temp, group = Month)) +
geom_line() +
geom_segment(aes(xend = 31, yend = Temp), linetype = 2, colour = 'grey') +
geom_point(size = 2) +
geom_text(aes(x = 31.1, label = Month), hjust = 0) +
transition_reveal(Day) +
coord_cartesian(clip = 'off') +
labs(title = 'Temperature in New York', y = 'Temperature (°F)') +
theme_minimal() +
theme(plot.margin = margin(5.5, 40, 5.5, 5.5))
?coord_cartesian
airq %>%
filter(day = 16) %>%
ggplot(aes(Day, Temp, group = Month)) +
geom_line() +
geom_segment(aes(xend = 31, yend = Temp), linetype = 2, colour = 'grey') +
geom_point(size = 2) +
geom_text(aes(x = 31.1, label = Month), hjust = 0) +
#transition_reveal(Day) +
coord_cartesian(clip = 'off') +
labs(title = 'Temperature in New York', y = 'Temperature (°F)') +
theme_minimal() +
theme(plot.margin = margin(5.5, 40, 5.5, 5.5))
airq %>%
filter(day == 16) %>%
ggplot(aes(Day, Temp, group = Month)) +
geom_line() +
geom_segment(aes(xend = 31, yend = Temp), linetype = 2, colour = 'grey') +
geom_point(size = 2) +
geom_text(aes(x = 31.1, label = Month), hjust = 0) +
#transition_reveal(Day) +
coord_cartesian(clip = 'off') +
labs(title = 'Temperature in New York', y = 'Temperature (°F)') +
theme_minimal() +
theme(plot.margin = margin(5.5, 40, 5.5, 5.5))
airq %>%
filter(day == 16) %>%
ggplot(aes(Day, Temp, group = Month)) +
geom_line() +
geom_segment(aes(xend = 31, yend = Temp), linetype = 2, colour = 'grey') +
geom_point(size = 2) +
geom_text(aes(x = 31.1, label = Month), hjust = 0) +
#transition_reveal(Day) +
coord_cartesian(clip = 'off') +
labs(title = 'Temperature in New York', y = 'Temperature (°F)') +
theme_minimal() +
theme(plot.margin = margin(5.5, 40, 5.5, 5.5))
airq
airq %>%
filter(Day == 16) %>%
ggplot(aes(Day, Temp, group = Month)) +
geom_line() +
geom_segment(aes(xend = 31, yend = Temp), linetype = 2, colour = 'grey') +
geom_point(size = 2) +
geom_text(aes(x = 31.1, label = Month), hjust = 0) +
#transition_reveal(Day) +
coord_cartesian(clip = 'off') +
labs(title = 'Temperature in New York', y = 'Temperature (°F)') +
theme_minimal() +
theme(plot.margin = margin(5.5, 40, 5.5, 5.5))
airq %>%
filter(Day <= 16) %>%
ggplot(aes(Day, Temp, group = Month)) +
geom_line() +
geom_segment(aes(xend = 31, yend = Temp), linetype = 2, colour = 'grey') +
geom_point(size = 2) +
geom_text(aes(x = 31.1, label = Month), hjust = 0) +
#transition_reveal(Day) +
coord_cartesian(clip = 'off') +
labs(title = 'Temperature in New York', y = 'Temperature (°F)') +
theme_minimal() +
theme(plot.margin = margin(5.5, 40, 5.5, 5.5))
?transition_reveal
airquality
lubridate::Month
lubridate:::Month
data(Month)
data(Month, package = "lubridate")
month.name:
month.name
airq = airquality %>%
mutate(Month = month.name[Month])
ggplot(airq, aes(Day, Temp, group = Month)) +
geom_line() +
geom_segment(aes(xend = 31, yend = Temp), linetype = 2, colour = 'grey') +
geom_point(size = 2) +
geom_text(aes(x = 31.1, label = Month), hjust = 0) +
transition_reveal(Day) +
coord_cartesian(clip = 'off') +
labs(title = 'Temperature in New York', y = 'Temperature (°F)') +
theme_minimal() +
theme(plot.margin = margin(5.5, 40, 5.5, 5.5))
library(ggthemes)
library(ggthemes)
g = ggplot(diamonds, aes(x=carat, y=price, color=cut)) + geom_point()
g
g + theme_base()
install.packages("xkcd")
library(xkcd)
install.packages("xkcd")
options(
htmltools.dir.version = FALSE, # for blogdown
width = 110,
tibble.width = 110
)
knitr::opts_chunk$set(
fig.align = "center",
out.width = "100%",
fig.height = 4,
dpi = 144
)
library(dplyr)
library(ggplot2)
library(patchwork)
library(gganimate)
ggplot2::theme_set(ggplot2::theme_bw())
set.seed(100)
diamonds = dplyr::sample_n(diamonds, 5000)
library(xkcd)
g + theme_gdocs()
g + xkcd::theme_xkcd()
vignette("xkcd-intro")
library(xkcd)
g + xkcd::theme_xkcd()
library(extrafont)
fonttable()
fonts()
font_import(pattern = "[X/x]kcd", prompt=FALSE)
fonts()
g + xkcd::theme_xkcd()
options(
htmltools.dir.version = FALSE, # for blogdown
width = 110,
tibble.width = 110
)
knitr::opts_chunk$set(
fig.align = "center",
out.width = "100%",
fig.height = 4,
dpi = 144
)
library(dplyr)
library(ggplot2)
library(patchwork)
library(gganimate)
ggplot2::theme_set(ggplot2::theme_bw())
set.seed(100)
diamonds = dplyr::sample_n(diamonds, 5000)
extrafont::font_import(pattern = "[X/x]kcd", prompt=FALSE)
g + xkcd::xkcd::theme_xkcd()
library(extrafont)
font_import(pattern = "[X/x]kcd", prompt=FALSE)
library(extrafont)
font_import(pattern = "[X/x]kcd", prompt=FALSE)
g + xkcd::xkcd::theme_xkcd()
g = ggplot(diamonds, aes(x=carat, y=price, color=cut)) + geom_point()
g + xkcd::xkcd::theme_xkcd()
g + xkcd::theme_xkcd()
g + geom_smooth(se=FALSE) + xkcd::theme_xkcd()
library(magrittr)
library(rvest)
html_table =
'<html>
<head>
<title>This is a title</title>
</head>
<body>
<table>
<th> <td>a</td> <td>b</td> <td>c</td> </th>
<tr> <td>1</td> <td>2</td> <td>3</td> </tr>
<tr> <td>2</td> <td>3</td> <td>4</td> </tr>
<tr> <td>3</td> <td>4</td> <td>5</td> </tr>
</table>
</body>
</html>'
read_html(html_table) %>% html_table()
read_html(html_table) %>% html_nodes("table") %>% html_table()
html_table =
'<html>
<head>
<title>This is a title</title>
</head>
<body>
<table>
<tr> <th>a</th> <th>b</th> <th>c</th> </tr>
<tr> <td>1</td> <td>2</td> <td>3</td> </tr>
<tr> <td>2</td> <td>3</td> <td>4</td> </tr>
<tr> <td>3</td> <td>4</td> <td>5</td> </tr>
</table>
</body>
</html>'
read_html(html_table) %>% html_nodes("table") %>% html_table()
install.packages("tidyr")
library(dplyr)
library(ggplot2)
library(tidyr)
library(parallel)
library(foreach)
library(doMC)
ggplot2::theme_set(theme_bw())
d = tribble(
~"n",  ~"1 core", ~"2 cores", ~"4 cores", ~"8 cores", ~"K20X (GPU)", ~"P100 (GPU)",
500,  0.018,  0.011, 0.008, 0.008, NA     , NA     ,
1000, 0.128,  0.068, 0.041, 0.036, 0.00598, 0.00072,
2000, 0.930,  0.491, 0.276, 0.162, 0.01733, 0.00471,
3000, 3.112,  1.604, 0.897, 0.489, 0.05417, 0.01382,
4000, 7.330,  3.732, 1.973, 1.188, 0.12554, 0.03243,
5000, 14.223, 7.341, 3.856, 2.310, 0.24091, 0.06228
)
d %>%
gather(cores,time,-n) %>%
ggplot(aes(x=n, y=time, color=cores)) +
geom_point(na.rm=TRUE) +
geom_line(na.rm=TRUE) +
labs(y="time (s)")
d %>%
gather(cores,time,-n) %>%
ggplot(aes(x=n, y=time, color=cores)) +
geom_point(na.rm=TRUE) +
geom_line(na.rm=TRUE) +
scale_y_log10() +
labs(y="time (s)")
d %>%
gather(cores,time,-n) %>%
ggplot(aes(x=n, y=time, color=cores)) +
geom_point(na.rm=TRUE) +
geom_line(na.rm=TRUE) +
scale_y_log10() +
labs(y="time (s)", title = "Matrix Multiply of (n x n) matrices")
n_rep = 5000
d_xy = select(d, x, y)
set.seed(3212016)
d = data.frame(x = 1:120) %>%
mutate(y = sin(2*pi*x/120) + runif(length(x),-1,1))
l = loess(y ~ x, data=d)
d = d %>% mutate(
pred_y = predict(l),
pred_y_se = predict(l,se=TRUE)$se.fit
) %>% mutate(
pred_low  = pred_y - 1.96 * pred_y_se,
pred_high = pred_y + 1.96 * pred_y_se
)
n_rep = 5000
d_xy = select(d, x, y)
res = map_dfr(
1:n_rep,
function(i) {
d_xy %>%
select(x,y) %>%
sample_n(nrow(d), replace=TRUE) %>%
loess(y ~ x, data=.) %>%
predict(newdata=d) %>%
setNames(NULL)
}
)
library(purrr)
n_rep = 5000
d_xy = select(d, x, y)
res = map_dfr(
1:n_rep,
function(i) {
d_xy %>%
select(x,y) %>%
sample_n(nrow(d), replace=TRUE) %>%
loess(y ~ x, data=.) %>%
predict(newdata=d) %>%
setNames(NULL)
}
)
d_xy %>%
select(x,y) %>%
sample_n(n(), replace=TRUE) %>%
loess(y ~ x, data=.) %>%
predict(newdata=d)
res = map_dfr(
1:n_rep,
function(i) {
d_xy %>%
select(x,y) %>%
sample_n(n(), replace=TRUE) %>%
loess(y ~ x, data=.) %>%
predict(newdata=d) %>%
setNames(NULL)
}
) %>%
do.call(rbind, .)
res = map(
1:n_rep,
function(i) {
d_xy %>%
select(x,y) %>%
sample_n(n(), replace=TRUE) %>%
loess(y ~ x, data=.) %>%
predict(newdata=d) %>%
setNames(NULL)
}
) %>%
do.call(rbind, .)
str(res)
d = d %>% mutate(
bs_low = apply(res,1,quantile,probs=c(0.025), na.rm=TRUE),
bs_high  = apply(res,1,quantile,probs=c(0.975), na.rm=TRUE)
)
res = map(
1:n_rep,
function(i) {
d_xy %>%
select(x,y) %>%
sample_n(n(), replace=TRUE) %>%
loess(y ~ x, data=.) %>%
predict(newdata=d) %>%
setNames(NULL)
}
) %>%
do.call(cbind, .)
d = d %>% mutate(
bs_low = apply(res,1,quantile,probs=c(0.025), na.rm=TRUE),
bs_high  = apply(res,1,quantile,probs=c(0.975), na.rm=TRUE)
)
d
ggplot(d, aes(x,y)) +
geom_point(color="gray50") +
geom_ribbon(aes(ymin=pred_low, ymax=pred_high), fill="red", alpha=0.25) +
geom_ribbon(aes(ymin=bs_low, ymax=bs_high), fill="blue", alpha=0.25) +
geom_line(aes(y=pred_y)) +
theme_bw()
install.packages(c("assertthat", "BatchGetSymbols", "caret", "e1071", "expm", "fs", "geoR", "getopt", "ggfortify", "git2r", "gtable", "highr", "languageserver", "openssl", "parsnip", "pkgbuild", "pls", "polynom", "quantmod", "RcppArmadillo", "recipes", "rhub", "rlang", "rstudioapi", "spatstat", "uroot", "whoami", "wrapr", "zoo"))
install.packages(c("Matrix", "mgcv"), lib="/usr/local/Cellar/r/3.5.3/lib/R/library")
install.packages(c("assertthat", "BatchGetSymbols", "caret", "e1071", "expm", "fs", "geoR", "getopt", "ggfortify", "git2r", "gtable", "highr", "languageserver", "openssl", "parsnip", "pkgbuild", "pls", "polynom", "quantmod", "RcppArmadillo", "recipes", "rhub", "rlang", "rstudioapi", "spatstat", "uroot", "whoami", "wrapr", "zoo"))
install.packages("polyclip")
install.packages("spatstat")
